from typing import List, Any

import numpy,os
from random import random, randint
import numpy as np
import output as output


def config():
    file1 = open("config_info","w")
    nom = input("nom de la plante :")
    age = input("age de la plante :")
    file1.write(nom + "\n")
    file1.write(age)
    file1.close()



file = open("config", "r+")
if "1" in file:
    print("cofigure")
else:
    config()
    file.write("1")
file.close()

print("Voulez vous enregistrer un autre arbre?")
enrg=input()
if enrg =="Non":
    print("souhaitez vous continuer?")
    rpns=input()
    print("ok")
    print("-------------------------")


fvalues = []
F = np.array(fvalues)
print(F)
v=[]
for i in range(100):
    fvalues.append(randint(20,40)+random())
for i in range(len(fvalues)):
    v= sum (fvalues)
print(fvalues)
print(v)
moy=v/len(fvalues)
print("valeur moyenne: ")
print(moy)
lr = 1 #learning rate
bias = 1 #value of bias
weights = [randint(1,5),randint(1,5),randint(1,5)] #weights generated in a list (3 weights in total for 2 neurons and the bias)
W = np.array(weights)
print("--------------")
print(W)
print("--------------")
def Perception(input1, input2, output) :
   outputP = input1*W[0]+input2*W[1]+bias*W[2]
   if outputP > 0 : #activation function (here Heaviside)
      outputP = 1
   else :
      outputP = 0
   error = output - outputP
   W[0] += error * input1 * lr
   W[1] += error * input2 * lr
   W[2] += error * bias * lr

for i in range(50) :
   Perception(1,1,1) #True or true
   Perception(1,0,1) #True or false
   Perception(0,1,1) #False or true
   Perception(0,0,0) #False or false
x = int(input())
y = int(input())
outputP = x*W[0] + y*W[1] + bias*W[2]
if outputP > 0 : #activation function
   outputP = 1
else :
   outputP = 0
print("--------------")
print(x, "or", y, "is : ", outputP)
outputP = 1/(1+numpy.exp(-outputP)) #sigmoid function
print("--------------")
print(outputP)
print("--------------")




if moy<=30 and moy>=35:
    print("Arrose moi ")
else:
    Perception()


